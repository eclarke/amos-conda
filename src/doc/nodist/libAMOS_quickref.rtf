{\rtf1\ansi\ansicpg1252\uc1 \deff0\deflang1033\deflangfe1033{\fonttbl{\f0\froman\fcharset0\fprq2{\*\panose 02020603050405020304}Times New Roman;}{\f1\fswiss\fcharset0\fprq2{\*\panose 020b0604020202020204}Arial;}
{\f2\fmodern\fcharset0\fprq1{\*\panose 02070309020205020404}Courier New;}{\f34\froman\fcharset238\fprq2 Times New Roman CE;}{\f35\froman\fcharset204\fprq2 Times New Roman Cyr;}{\f37\froman\fcharset161\fprq2 Times New Roman Greek;}
{\f38\froman\fcharset162\fprq2 Times New Roman Tur;}{\f39\froman\fcharset177\fprq2 Times New Roman (Hebrew);}{\f40\froman\fcharset178\fprq2 Times New Roman (Arabic);}{\f41\froman\fcharset186\fprq2 Times New Roman Baltic;}
{\f42\fswiss\fcharset238\fprq2 Arial CE;}{\f43\fswiss\fcharset204\fprq2 Arial Cyr;}{\f45\fswiss\fcharset161\fprq2 Arial Greek;}{\f46\fswiss\fcharset162\fprq2 Arial Tur;}{\f47\fswiss\fcharset177\fprq2 Arial (Hebrew);}
{\f48\fswiss\fcharset178\fprq2 Arial (Arabic);}{\f49\fswiss\fcharset186\fprq2 Arial Baltic;}{\f50\fmodern\fcharset238\fprq1 Courier New CE;}{\f51\fmodern\fcharset204\fprq1 Courier New Cyr;}{\f53\fmodern\fcharset161\fprq1 Courier New Greek;}
{\f54\fmodern\fcharset162\fprq1 Courier New Tur;}{\f55\fmodern\fcharset177\fprq1 Courier New (Hebrew);}{\f56\fmodern\fcharset178\fprq1 Courier New (Arabic);}{\f57\fmodern\fcharset186\fprq1 Courier New Baltic;}}{\colortbl;\red0\green0\blue0;
\red0\green0\blue255;\red0\green255\blue255;\red0\green255\blue0;\red255\green0\blue255;\red255\green0\blue0;\red255\green255\blue0;\red255\green255\blue255;\red0\green0\blue128;\red0\green128\blue128;\red0\green128\blue0;\red128\green0\blue128;
\red128\green0\blue0;\red128\green128\blue0;\red128\green128\blue128;\red192\green192\blue192;}{\stylesheet{\ql \li0\ri0\widctlpar\aspalpha\aspnum\faauto\adjustright\rin0\lin0\itap0 \fs24\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 \snext0 Normal;}
{\*\cs10 \additive Default Paragraph Font;}}{\info{\author Adam M Phillippy}{\operator Adam M Phillippy}{\creatim\yr2004\mo7\dy21\hr16\min5}{\revtim\yr2005\mo5\dy12\hr11\min18}{\version8}{\edmins44}{\nofpages4}{\nofwords738}{\nofchars4209}
{\*\company TIGR}{\nofcharsws0}{\vern8247}}\widowctrl\ftnbj\aenddoc\noxlattoyen\expshrtn\noultrlspc\dntblnsbdb\nospaceforul\hyphcaps0\horzdoc\dghspace120\dgvspace120\dghorigin1701\dgvorigin1984\dghshow0\dgvshow3
\jcompress\viewkind1\viewscale100\nolnhtadjtbl \fet0\sectd \linex0\sectdefaultcl {\*\pnseclvl1\pnucrm\pnstart1\pnindent720\pnhang{\pntxta .}}{\*\pnseclvl2\pnucltr\pnstart1\pnindent720\pnhang{\pntxta .}}{\*\pnseclvl3\pndec\pnstart1\pnindent720\pnhang
{\pntxta .}}{\*\pnseclvl4\pnlcltr\pnstart1\pnindent720\pnhang{\pntxta )}}{\*\pnseclvl5\pndec\pnstart1\pnindent720\pnhang{\pntxtb (}{\pntxta )}}{\*\pnseclvl6\pnlcltr\pnstart1\pnindent720\pnhang{\pntxtb (}{\pntxta )}}{\*\pnseclvl7
\pnlcrm\pnstart1\pnindent720\pnhang{\pntxtb (}{\pntxta )}}{\*\pnseclvl8\pnlcltr\pnstart1\pnindent720\pnhang{\pntxtb (}{\pntxta )}}{\*\pnseclvl9\pnlcrm\pnstart1\pnindent720\pnhang{\pntxtb (}{\pntxta )}}\pard\plain 
\ql \li0\ri0\nowidctlpar\faauto\rin0\lin0\itap0 \fs24\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 {\b\fs32 libAMOS API quick reference
\par }{\f2\fs22 
\par #include <foundation_AMOS.hh>   }{\fs22 all of the below
\par }{\f2\fs22 
\par #include <inttypes_AMOS.hh>     }{\fs22 integer typedefs}{\f2\fs22 
\par #include <exceptions_AMOS.hh>   }{\fs22 exception types}{\f2\fs22 
\par #include <datatypes_AMOS.hh>    }{\fs22 structs}{\f2\fs22 
\par #include <databanks_AMOS.hh>    }{\fs22 bank types}{\f2\fs22 
\par #include <messages_AMOS.hh>     }{\fs22 message types and message NCodes}{\f2\fs22 
\par #include <universals_AMOS.hh>   }{\fs22 assembly classes
\par }{\b\fs28 
\par TERMINOLOGY}{\i\ul 
\par }{\f2\fs22 IID             }{\fs22 internal integer identifier and object reference}{\f2\fs22 
\par EID             }{\fs22 external string identifier}{\f2\fs22 
\par BID             }{\fs22 bank specific identifier (index of the file store)
\par }{\f2\fs22 3-Code          }{\fs22 3-character identifier string for objects and fields
\par }{\f2\fs22 N-Code          }{\fs22 an integer representation of a 3-code (Encode/Decode functions)
\par }{\f2\fs22 message         }{\fs22 a single curly-bracketed AMOS message
\par }{\f2\fs22 sub-message     }{\fs22 a single curly-bracketed AMOS message contained by another}{\f2\fs22 
\par normal           ---a--->  ---b--->
\par anti-normal     <---a---  <---b---
\par innie            ---a---> <---b---
\par outie           <---a---   ---b--->
\par }{\b\fs28 
\par GLOBAL NAMESPACE
\par }{\i\ul TYPEDEFS}{\i 
\par }{\f2\fs22 [u]int(bits)_t  }{\fs22 signed or unsigned 8,16,32,64 bit integers
\par }{\b\fs28 
\par }{\f2\fs22 ID_t            uint32_t        }{\fs22 integer identifier}{\f2\fs22 
\par NCode_t         uint32_t        }{\fs22 integer object identifier
\par }{\f2\fs22 SD_t            uint32_t        }{\fs22 standard deviation}{\f2\fs22 
\par Size_t          int32_t         }{\fs22 size type
\par }{\f2\fs22 Status_t        char            }{\fs22 object status
\par }{\f2\fs22 Pos_t           int32_t         }{\fs22 position type}{\b\fs28 
\par }{\fs22 
\par }{\b\fs28 "AMOS" NAMESPACE}{\f2\fs22 
\par }{\i\ul CONSTANTS}{\b 
\par }{\f2\fs22 NCODE_SIZE      3               }{\fs22 length of NCode string
\par }{\f2\fs22 NULL_NCODE      0               }{\fs22 null object code
\par }{\f2\fs22 NULL_ID         0               }{\fs22 null identifier
\par }{\f2\fs22 NULL_STATUS     0               }{\fs22 null status
\par }{\f2\fs22 MIN_QUALITY     '0'             }{\fs22 minimum quality score
\par }{\f2\fs22 MAX_QUALITY     '0' + 63        }{\fs22 maximum quality score
\par }{\f2\fs22 NULL_CHAR       '\\0'            }{\fs22 null character
\par }{\f2\fs22 NL_CHAR         '\\n'            }{\fs22 newline character
\par }{\f2\fs22 NULL_STRING     string("")      }{\fs22 null string
\par \page 
\par }{\f2\fs22 MAX_ID          (1<<32)-1       }{\fs22 maximum identifier
\par }{\f2\fs22 MAX_SIZE        (1<<31)-1       }{\fs22 maximum size
\par }{\f2\fs22 MAX_POS         (1<<31)-1       }{\fs22 maximum position
\par 
\par }{\f2\fs22 E_ADD           'A'             }{\fs22 bank addition event
\par }{\f2\fs22 E_DELETE        'D'             }{\fs22 bank deletion event
\par }{\f2\fs22 E_REPLACE       'R'             }{\fs22 bank replacement event}{\f2\fs22 
\par F_IID           Encode("iid")   }{\fs22 internal identifier (IID) field NCode
\par }{\f2\fs22 M_READ          Encode("RED")   }{\fs22 read message NCode
\par }{\f2\fs22 F_*                             }{\fs22 see API for full list of fields}{\f2\fs22 
\par M_*                             }{\fs22 see API for full list of messages}{\f2\fs22 
\par 
\par }{\i\ul FUNCTIONS}{\b 
\par }{\f2\fs22 BankExists (NCode_t, string)    }{\fs22 check for a bank of type in dir
\par }{\f2\fs22 string Decode (NCode_t)         NCode_t to string
\par NCode_t Encode (string)         string to NCode_t}{\fs22 
\par }{\f2\fs22 ostream << Exception_t          }{\fs22 write AMOS exception info to stream}{\b\fs28 
\par }{\f2\fs22 ostream << exception            }{\fs22 write std exception info to stream
\par }{\f2\fs22 readLE (istream, int*)          }{\fs22 read a little-endian int from a stream
\par }{\f2\fs22 writeLE (ostream, int*)         }{\fs22 write a little-endian int to a stream
\par }{\f2\fs22 char Qual2Char (uint8_t)        }{\fs22 convert a qual score to a viewable char
\par }{\f2\fs22 uint8_t Char2Qual (char)        }{\fs22 convert a viewable qual char to a qual score
\par }{\f2\fs22 SafeCalloc (size_t, size_t)     }{\fs22 same as calloc but throws AMOS exception}{\b\fs28 
\par }{\f2\fs22 SafeMalloc (size_t)             }{\fs22 same as malloc but throws AMOS exception}{\b\fs28 
\par }{\f2\fs22 SafeRealloc (void*, size_t)     }{\fs22 same as realloc but throws AMOS exception}{\b\fs28 
\par }{\f2\fs22 SafeStrdup (const char*)        }{\fs22 same as strdup but throws AMOS exception}{\b\fs28 
\par 
\par }{\i\ul CLASSES}{\i 
\par }{\f2\fs22 Bank_t                          }{\fs22 random access bank}{\f2\fs22 
\par      BankStream_t               }{\fs22 stream-style access bank}{\f2\fs22 
\par Exception_t                     }{\fs22 general exception}{\f2\fs22 
\par      AlignmentException_t       }{\fs22 alignment error exception}{\f2\fs22 
\par      AllocException_t           }{\fs22 allocation error exception}{\f2\fs22 
\par      ArgumentException_t        }{\fs22 logical parameter error exception}{\f2\fs22 
\par      IOException_t              }{\fs22 I/O error exception}{\f2\fs22 
\par IBankable_t                     }{\fs22 bank-able object interface}{\f2\fs22 
\par      Universal_t                }{\fs22 bank-able and message-able object}{\f2\fs22 
\par           Contig_t
\par           Feature_t
\par           Fragment_t
\par           Group_t
\par           Index_t
\par           Kmer_t
\par           Layout_t
\par           Library_t
\par           Link_t
\par                ContigLink_t
\par                ScaffoldLink_t
\par                Edge_t
\par                     ContigEdge_t
\par                     ScaffoldEdge_t
\par           Matepair_t
\par           Overlap_t
\par           Scaffold_t
\par           Sequence_t
\par                Contig_t
\par                Read_t
\par IMessageable_t                  }{\fs22 message-able object interface}{\f2\fs22 
\par      Distribution_t
\par      IDMap_t                    }{\fs22 IID, EID, BID mapping}{\f2\fs22 
\par      Tile_t
\par      Universal_t*
\par Message_t                       }{\fs22 message I/O class}{\f2\fs22 
\par Range_t                         }{\fs22 linear range}{\f2\fs22 
\par BankSet_t                       }{\fs22 complete set of banks hashed by NCode}{\f2\fs22 
\par BankStreamSet_t                 }{\fs22 complete set of bank streams hashed by NCode}{\f2\fs22 
\par UniversalSet_t                  }{\fs22 complete set of universals hashed by NCode}{\f2\fs22 
\par }{\f1\fs20 
\par }{\b\fs28 EXAMPLES}{\f1\fs20 
\par }{\i\ul MESSAGE to BANK
\par }{\f2\fs22 #include <iostream>
\par #include <foundation_AMOS.hh>
\par using namespace std;
\par using namespace AMOS;
\par 
\par int main ( )
\par \{
\par   Message_t msg;
\par   Universal_t obj;
\par   BankStream_t bank(Universal_t::NCODE);
\par 
\par   try \{
\par     bank.create ("bankdir");
\par     while ( msg.read (cin) )   // gets next message from cin
\par     \{
\par       obj.readMessage (msg);   // gets obj from msg
\par       bank << obj;             // appends obj to bank
\par     \}
\par     bank.close( );
\par   \}
\par   catch (Exception_t & e) \{
\par     cerr << "ERROR: -- AMOS Exception --" << endl << e;
\par   \}
\par   return 0;
\par \}
\par }{\i\ul 
\par BANK to MESSAGE
\par }{\f2\fs22 ...
\par int main ( )
\par \{
\par   Message_t msg;
\par   Universal_t obj;
\par   BankStream_t bank(Universal_t::NCODE);
\par 
\par   try \{
\par     bank.open ("bankdir");
\par     while ( bank >> obj )      // fetches next banked object
\par     \{
\par       obj.writeMessage (msg);  // writes the obj to msg
\par       msg.write (cout);        // writes message to cout
\par     \}
\par     bank.close( );
\par   \}
\par   catch (Exception_t & e) \{
\par     cerr << \'93FATAL: \'93 << e . what( ) << endl
\par          << \'93  could not complete, abort\'94 << endl;
\par   \}
\par   return 0;
\par \}}{\f1\fs20 
\par 
\par }{\i\ul RANDOM FETCH
\par }{\f2\fs22 ...
\par int main ( )
\par \{
\par   ID_t iid;
\par   Read_t red;\line   Bank_t bank(Read_t::NCODE);
\par 
\par   bank.open ("bankdir");
\par   if ( (iid = bank.lookupIID (\'93GBSAA01TF\'94)) != NULL_ID )
\par   \{
\par     bank.fetch (iid, red);            // gets the read by IID
\par     bank.fetch (\'93GBSAA01TF\'94, red);    // gets same read by EID
\par   \}
\par   bank.close( );
\par   
\par   return 0;\line \}}{\i\ul 
\par }{\f1\fs20 
\par }}